services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    platform: linux/amd64
    ports:
      - "4000:4000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=4000
      - MCP_SQL_COMMAND=/app/mcp/MssqlMcp
      - MCP_CONNECTION_STRING=Server=sqlserver,1433;Database=MCPNexus;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;
      - MCP_NEXUS_URL=http://backend:4000/mcp-nexus/server
    volumes:
      # Mount the MCP executable with all its dependencies
      - /Users/havivrosh/work/SQL-AI-samples/MssqlMcp/dotnet/MssqlMcp/bin/Release/net9.0/linux-x64:/app/mcp:ro
    restart: unless-stopped
    networks:
      - mcp-network
    depends_on:
      - sqlserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:5173"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:4000/mcp-nexus/chat
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-network

  # SQL Server for production
  sqlserver:
    build:
      context: .
      dockerfile: Dockerfile.sqlserver
    container_name: mcp-sqlserver-prod
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Passw0rd
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"  
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - mcp-network
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge

volumes:
  sqlserver_data:
